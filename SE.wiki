%toc
%title akun's Wiki - 软件工程杂记

= 软件工程杂记 =

* 你认为没问题的地方，还是会有问题

== 有意思的比喻 ==

测试人员不是拦住bug的守门员

http://www.aqee.net/why-testers-are-not-the-goalkeepers-of-bugs/

很多次我都听到有人说：“测试人员说挡住bug的守门员”，因此，他们认为，测试组绝对不该让任何一个bug溜进发布到客户手中的最终版里！我对这种说法有自己的见解，这篇文章就是要说这个事情。

守门员要守住bug，并不意味着他们是唯一为bug溜入负责的人。除了守门员外，我们还应该有后卫，中场和前锋，他们是项目团队的组成部分。这些人同样要为找出和纠正bug贡献力量，而且是在这些bug到达守门员或测试组之前。如果团队中有人不用心，那么守门员也会扑不到球，测试组也拦不住bug。

最终，是大家共同努力，才能在软件发布到客户手中之前捕捉到这些bug。当然，我们也必须清楚，没有软件能做到杜绝bug，有些bug是只有到了客户手上才会出现。

祝一切顺利

:)

== 软件版本周期 ==

* https://zh.wikipedia.org/zh-cn/軟件版本週期

== SCM ==

* https://code.google.com/p/kcpycamp/wiki/HowtoScm

== code review ==

* 其实code review的量很少的，研发大多数时间还是在想设计
* 平时code review实践，以2-3人，审阅一个模块代码
* 有个类似工单跟踪会很好
* 可以各种评论

== Joel法则 ==

* http://www.joelonsoftware.com/articles/fog0000000043.html
* http://chinese.joelonsoftware.com/Articles/TheJoelTest.html

== 沟通 ==

* 沟通的意思是，不是你说了什么，而是对方听到了什么

== 文档 ==

* 写文档：给看的人
* 讲文档：不一定给看的人
* 问题描述只描述问题定义

== 流程图 =

* 不要把所有内容放到一个流程图、构架途中
* 一个说不清，拆分为多个说明

http://wiki.mbalib.com/zh-tw/流程图

== 单元测试 ==

* http://www.yinwang.org/blog-cn/2013/04/07/test-driven-dev
