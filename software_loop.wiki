一种做项目的思路分享
倒推法
先发布个空壳
从研发、测试、发布、文档啥的该有的都有
然后这就是个软件
bill gate买basic给IBM
前提大家的技能都得到位
吹出去的牛逼能很快实现

文章分享：Python
投石问路
曳光弹


.editorconfig，提一句，yanc以前说过

== 开篇 ==

对用户来说，软件开发就是
我有一个想法 -> 一个时光机器 -> 这就是我想要的

银弹？

事实上，开发软件根本没有所谓“绝对正确的方法”。倒是有很多错误的方法。

“务实”

如今，50%~70%的软件开发团队并没有使用那些基本的、众所周知的软件实践。

code review、 CI 、UT等等

== 需求 ==

* 产品将易于使用，是需求
* 产品将有一个图形用户界面，是解决方案

* 产品将在菜单条上有一个时钟，是解决方案。
* 产品将使用户意识到当前的时间，是需求。

* 切记需求txt化
* 最好需求exe化，变更也得有个编译的过程

== 设计 ==

* 概要

* 详细

== code debug test ==

* 程序员要有好的构建能力
* 0 -> 1
* 自动化
* 思考 -> 代码 -> soft

放这么多，这块最喜欢的，但往往其实花的时间最少的

前面提到的软件实践：

* 从第一天起就使用脚本构建
  * 任何机器都可以作为构建机
  * 持续构建
  * 持续测试
  * 使用的工具能集成，命令行
* 通过每日例会频繁进行航向修正
* 要把代码审查当作呼吸
* 集成代码很痛苦，解决办法很简单：更频繁地集成代码，从而减少冲突，简化合并工作。
* 使用CI系统
* 尽早而且经常发布真实演示系统
* 整个开发过程中一直要与客户保持联系。
* 避免集体失忆
* 使用模拟客户测试方法编写你自己的测试，这样各个测试可以得到最大回报。
  * 使用缺陷驱动测试来明确要编写哪些测试。
  * 测试有bug的代码
* 目标是软件，而不是遵循过程


产品会从“你们的”变成“我们的”。最后你会得到一个合作伙伴，而不是一个吹毛求疵的批评家。

在团队看来，“如果这个实践能让我5点就下班回家，那我就接受”。

在有一个自动测试唐家你的工作室工作过之后，你肯定不愿意再退回到没有自动测试套件的工作室了。

如果你的整个开发工作室都被火烧为灰烬，利用一个春初备份就可以轻松恢复。你应当具备构建整个产品所需的全部内容。如果做不到，那就说明你可能没有正确地使用

== test and test ==


== 额外：计划 ==

* 估算时应该用“人时”还是“人日”
* 人日，理想日，但一个人很难在一个工作日内完成8个小时的工作，最好状况也就6个小时。
* 根据项目团队还进，也许也就2-3小时。
* “人时”比较合理！


* 尽可能使用“小石子”进行估算
* “小石子”：大任务被拆分成的小任务，每个小任务的完成不会超过两天，通常一天足矣。只有“完成”和“未完成”两种状态，不存在所谓的完成百分比。

== final ==

一流的产品只不过是好习惯的副产品。

他们遵循采石工人的信条：尽管我们只是采石头，但脑海中必须想象着最终建造出的宏伟教堂

如果自己就是用户，那么就最好了，这是我想要的功能吗？

== 团队的重要 ==

银弹是否存在？如果有的话，那就是一个牛逼哄哄的团队

好的团队一定能够达到：Joel 衡量法则

* 你们用不用源文件管理系统？
* 你们可以把整个系统从源码到ＣＤ映像文件一步建成吗？
* 你们每天白天都把从系统源码到ＣＤ映像做一遍吗？
* 你们有软件虫管理系统吗？
* 你们在写新程序之前总是把现有程序里已知的虫解决吗？
* 你们的产品开发日程安排是否反映最新的开发进展情况？
* 你们有没有软件开发的详细说明书？
* 你们的程序员是否工作在安静的环境里？
* 你们是否使用现有市场上能买到的最好的工具？
* 你们有没有专职的软件测试人员？
* 你们招人面试时是否让写一段程序？
* 你们是否随便抓一些人来试用你们的软件？
