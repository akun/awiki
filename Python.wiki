%toc
%title akun's Wiki - Python

= Python =

== 编程规范 ==

文件头

{{{
#!/usr/bin/env python
}}}

哑元素

如果某个tuple值不再后面用，可以写成这样

{{{
stdout, _ = get_tuple()
}}}

== 读中文文件 ==

{{{
import codecs
codecs.open('zhongwen.txt', 'utf-8')
}}}

== Traceback ==

{{{
import traceback
traceback_info = traceback.format_exc()
}}}

== 等差划分数列 ==

{{{
def divice_list_to_eaual_part(top, part_size):
    return [(i, i + part_size) for i in range(0, top, part_size)]  # yeild -> ()

if __name__ == '__main__':
    print divice_list_to_eaual_part(1500, 500)
}}}

== 字符串/格式化 ==

连接

{{{
"hello{0}""world{0}".format(10)
}}}

切割

{{{
str.split
str.splitlines
}}}

浮点型格式化失真

{{{
'%.30f' % 0.00000000000000000000001
}}}


删除控制字符串

{{{
'x\r\n\t\bx'.translate(None, ''.join([chr(x) for x in range(32) + [127]]))
}}}

http://svn.python.org/projects/python/trunk/Lib/curses/ascii.py

文件名后缀

{{{
module_name, ext = os.path.splitext(filename)
}}}


== datetime & time ==

{{{
import datetime
import time
import psutil
boot_time = psutil.get_boot_time()
datetime.datetime.fromtimestamp(boot_time)
time.localtime(boot_time)
}}}

datetime与time之间的相互转换

{{{
>>> import time, datetime
>>> t = time.time()
>>> d_from_t = datetime.datetime.fromtimestamp(t)
>>> d_from_t
datetime.datetime(2008, 10, 31, 12, 50, 29, 578000)
>>> tt = time.mktime(d_from_t.timetuple())
>>> tt
1225428629.0
>>> t
1225428629.5780001
}}}

不过在转换的过程中需要注意的是：
* time到datetime的转换是忽略小数点后面的数值
* 即：int(t) = int(tt), t != tt

== URL ==

协议头一起判断

{{{
url.startswith(('http://', 'https://'))
}}}

Query参数转化为字典

{{{
>>> u = urlparse.urlparse('http://www.example.com/?username=admin&password=admin')
>>> dict(urlparse.parse_qsl(u.query))
{'username': 'admin', 'password': 'admin'}
}}}

URL拼接

{{{
from urlparse import urljoin
}}}

== 日志 ==

* http://www.python.org/dev/peps/pep-0282/
* http://docs.python.org/2.7/library/logging.config.html#logging.config.dictConfig
* http://docs.python.org/2/howto/logging-cookbook.html#logging-cookbook
* http://docs.python.org/2.7/howto/logging.html#logging-advanced-tutorial

多进程写同文件日志的问题：

* http://docs.python.org/2/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes
* http://plumberjack.blogspot.com/2010/09/using-logging-with-multiprocessing.html

== 异常 ==

不推荐

{{{
>>> raise NotImplemented
Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
TypeError: exceptions must be old-style classes or derived from BaseException, not NotImplementedType
}}}

推荐

{{{
>>> raise NotImplementedError()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NotImplementedError
}}}

异常Hook

* http://docs.python.org/2/library/sys.html#sys.excepthook

== 线程/进程 ==

Signal使用注意多线程场景

* http://docs.python.org/2/library/signal.html

* os.system
* os.poepn
* subprocess

队列和进程fork

{{{
#!/usr/bin/env python


import os
import multiprocessing


def my_fork():
    alist = [1, 2]
    aqueue = multiprocessing.Queue(maxsize=2)
    aqueue.put(2)
    aqueue.put(1)

    child_pid = os.fork()

    if child_pid == 0:
        print 'Child Process: PID# %s' % os.getpid()
        print 'Wrong', alist, id(alist), id(alist[0]), id(alist[1]), alist.pop()
        print 'Right', aqueue.get()
    else:
        print 'Parent Process: PID# %s' % os.getpid()
        print 'Wrong', alist, id(alist), id(alist[0]), id(alist[1]), alist.pop()
        print 'Right', aqueue.get()

if __name__ == '__main__':
    my_fork()
}}}

== 跨平台/程序移植性 ==

* 文件换行：os.linesep
* 文件路径分割：os.path.sep
* Popen(['grep', grep_pattern], stdin=process_ps.stdout, stdout=PIPE, universal_newlines=True)
* os.path.join(os.path.abspath(os.path.dirname(__file__)), 'YOUR_FILE_PATH')
* 慎用os.chdir()或者得配合好os.getcwd()

== 发布工具 ==

发布包含文件：MANIFEST.in

* http://docs.python.org/2/distutils/sourcedist.html#the-manifest-in-template

== 有意思的 ==

=== 注释技巧 ===

{{{
# XXXX
'''
return True
'''
return False
#'''
}}}

== 疑问 ==

* http://docs.python.org/2/library/inspect.html

%% print >>output, "wello horld"
