= Django =

%toc

== 熟练度 ==

=== manage.py ===
python manage.py --help

Usage: manage.py subcommand [options] [args]

* [ ] Options:
* [X]   --settings=SETTINGS   The Python path to a settings module, e.g.<br>
                         "myproject.settings.main". If this isn't provided, the<br>
                         DJANGO_SETTINGS_MODULE environment variable will be<br>
                         used.
* [ ]   --pythonpath=PYTHONPATH<br>
                         A directory to add to the Python path, e.g.<br>
                         "/home/djangoprojects/myproject".
* [ ]   --traceback           Print traceback on exception
* [ ]   --version             show program's version number and exit
* [X]   -h, --help            show this help message and exit

Type 'manage.py help <subcommand>' for help on a specific subcommand.

Available subcommands:
* [ ]   cleanup
* [ ]   compilemessages
* [ ]   createcachetable
* [ ]   createsuperuser
* [X]   dbshell
* [ ]   diffsettings
* [ ]   dumpdata
* [ ]   flush
* [ ]   inspectdb
* [ ]   loaddata
* [ ]   makemessages
* [ ]   reset
* [ ]   runfcgi
* [X]   runserver
* [ ]   shell
* [ ]   sql
* [ ]   sqlall
* [ ]   sqlclear
* [ ]   sqlcustom
* [ ]   sqlflush
* [ ]   sqlindexes
* [ ]   sqlinitialdata
* [ ]   sqlreset
* [ ]   sqlsequencereset
* [X]   startapp
* [X]   syncdb
* [X]   test
* [ ]   testserver
* [ ]   validate

== 源码中各种有用的中间件 ==

== 数据库中的zlib ==

http://stackoverflow.com/questions/875122/zlib-in-database-django

{{{class="brush: python"
from base64 import binascii

f = VCFile(head = binascii.b2a_base64('blahblah'.encode('zlib')))
}}}

== ORM ==

http://www.eflorenzano.com/blog/post/secrets-django-orm/

{{{class="brush: python"
[[>>>]] qs = TumbleItem.objects.all()
>>> qs.query.group_by = ['item_type']
>>> qs.query.having = ['COUNT(item_type) > 1']
>>> item_types = [i.item_type for i in qs]
>>> item_types
[u'blog', u'digg']
}}}

== 大数 ==

新版Django已经支持

http://www.numlock.ch/news/it/django-custom-model-field-for-an-unsigned-bigint-data-type/

{{{class="brush: python"
from django.db import models
from django.db.models.fields import PositiveIntegerField

class PositiveBigIntegerField(PositiveIntegerField):
    """Represents MySQL's unsigned BIGINT data type (works with MySQL only!)"""
    empty_strings_allowed = False

    def get_internal_type(self):
        return "PositiveBigIntegerField"

    def db_type(self):
        # This is how MySQL defines 64 bit unsigned integer data types
        return "bigint UNSIGNED"

class Mytest(models.Model):
    """Just a test model"""

    huge_id = PositiveBigIntegerField()

    def __unicode__(self):
        return u'id: %s, huge_id: %s' % (self.id, self.huge_id)
}}}

== 序列化 ==

python ui/manage.py loaddata site.json

{{{class="brush: python"

from django.core import serializers

from django.core.management import setup_environ
from myproject.ui import settings
setup_environ(settings)
from myproject.ui.models import Task

task = Task.objects.get(id=9527)
all_objects = [task]

json_serializer = serializers.get_serializer('json')()
json_serializer.serialize(all_objects, ensure_ascii=True, stream=open('site.json', 'w'))
}}}

== 乘除法 ==

http://my.oschina.net/renwofei423/blog/12713

{{{
django 模板的乘法，除法

Note: The results are rounded to an integer before returning, so this may have marginal utility for many cases.

So, in summary:

to compute A*B: {% widthratio A 1 B %}
to compute A/B: {% widthratio AB 1 %}

And, since add is a filter and not a tag, you can always to crazy stuff like:

compute A^2: {% widthratio A 1 A %}
compute (A+B)^2: {% widthratio A|add:B 1 A|add:B %}
compute (A+B) * (C+D): {% widthratio A|add:B 1 C|add:D %}
}}}

原文出处：http://slacy.com/blog/2010/07/using-djangos-widthratio-template-tag-for-multiplication-division/

== 单元测试 ==

* ui目录下操作
* 编写tests.py
  * 基本的如200访问正常和功能正常，随着项目进行不断完善各种情况下的单元测试
* fixture的准备
  * 每个app独立的fixture
  * 如：user
  * python manage.py dumpdata user auth --indent=4 > user.json
  * mv user.json ui/fixture/
* 修改settings.py
{{{
FIXTURE_DIRS = (
     '$PROJECT_HOME/ui/fixture/',
 )
}}}
* 运行unit test
{{{
python manage.py test user
}}}

== 诡异问题 ==

django-admin.py startproject Unknown command: 'startproject'

* 在安装好Django后，一般要创建一个项目，然后设置DJANGO_SETTINGS_MODULE环境变量将其指向该项目的settings.py这个文件；
* 如果DJANGO_SETTINGS_MODULE环境变量不为空，下次在使用django-admin.py startproject来创建新项目的时候，会提示找不到startproject这个命令，提示错误为：
* Unknown command: 'startproject'
* 即使使用django-admin.py --help 来查看支持的命令，里面也找不到startproject命令。
* 原来，如果DJANGO_SETTINGS_MODULE环境变量值不为空，则startproject命令是不支持的，下次在重新创建一个项目时需要将DJANGO_SETTINGS_MODULE设置为空，startproject就又可以使用了。

== Django下载大文件和压缩zip文件 ==

{{{
import os, tempfile, zipfile
from django.http import HttpResponse
from django.core.servers.basehttp import FileWrapper


def send_file(request):
    """
    Send a file through Django without loading the whole file into
    memory at once. The FileWrapper will turn the file object into an
    iterator for chunks of 8KB.
    """
    filename = __file__ # Select your file here.
    wrapper = FileWrapper(file(filename))
    response = HttpResponse(wrapper, content_type='text/plain')
    response['Content-Length'] = os.path.getsize(filename)
    return response


def send_zipfile(request):
    """
    Create a ZIP file on disk and transmit it in chunks of 8KB,
    without loading the whole file into memory. A similar approach can
    be used for large dynamic PDF files.
    """
    temp = tempfile.TemporaryFile()
    archive = zipfile.ZipFile(temp, 'w', zipfile.ZIP_DEFLATED)
    for index in range(10):
        filename = __file__ # Select your files here.
        archive.write(filename, 'file%d.txt' % index)
    archive.close()
    wrapper = FileWrapper(temp)
    response = HttpResponse(wrapper, content_type='application/zip')
    response['Content-Disposition'] = 'attachment; filename=test.zip'
    response['Content-Length'] = temp.tell()
    temp.seek(0)

    return response
}}}
